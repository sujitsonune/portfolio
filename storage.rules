rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
             'admin' in request.auth.token &&
             request.auth.token.admin == true;
    }
    
    function isValidImageFile() {
      return request.resource.contentType.matches('image/.*') &&
             request.resource.size < 5 * 1024 * 1024; // 5MB limit
    }
    
    function isValidDocumentFile() {
      return request.resource.contentType in [
        'application/pdf',
        'application/msword',
        'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
        'text/plain'
      ] && request.resource.size < 10 * 1024 * 1024; // 10MB limit
    }

    // Public images (portfolio images, profile photos, etc.)
    match /images/{allPaths=**} {
      allow read: if true; // Publicly readable
      allow write: if isAdmin() && isValidImageFile();
      allow delete: if isAdmin();
    }

    // Documents (resumes, certificates, etc.)
    match /documents/{allPaths=**} {
      allow read: if true; // Publicly readable for portfolio
      allow write: if isAdmin() && isValidDocumentFile();
      allow delete: if isAdmin();
    }

    // Private uploads (temporary files, drafts, etc.)
    match /private/{userId}/{allPaths=**} {
      allow read, write: if isAuthenticated() && 
                           (request.auth.uid == userId || isAdmin());
      allow delete: if isAdmin();
    }

    // Temporary uploads (for form uploads before processing)
    match /temp/{sessionId}/{fileName} {
      allow create: if isValidImageFile() || isValidDocumentFile();
      allow read: if true;
      allow delete: if isAdmin();
    }

    // Backups (admin only)
    match /backups/{allPaths=**} {
      allow read, write, delete: if isAdmin();
    }

    // Catch-all rule - deny access to any other paths
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}